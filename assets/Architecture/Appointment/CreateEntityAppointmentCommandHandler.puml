@startuml
class "CreateEntityAppointmentCommandHandler"<TEntity,TCreateEntityAppointmentCommand> {
'    + CreateEntityAppointmentCommandHandler(entityType:EntityType, entityValidator:IEntityValidator, emailTotalSizeValidator:IEmailTotalSizeValidator, entityRepository:IGenericRepository<TEntity>, contactsMapper:IEntityAppointmentReferenceMapper<AppointmentContact>, negotiatorsMapper:IEntityAppointmentReferenceMapper<User>, appointmentAttachmentsMapper:IAppointmentAttachmentsMapper<TEntity>, currentUserProvider:ICurrentUserProvider, mediator:ISyncMediator, windowsTimeZoneHelper:IWindowsTimeZoneHelper, enumTypeItemRepository:IEnumTypeItemRepository, appointmentOtherAttendeesMapper:IEntityAppointmentOtherAttendeesMapper<AppointmentOtherAttendee>, appointmentMessageMapper:IEntityAppointmentReferenceMapper<AppointmentMessage>, appointmentCovidAssessmentMapper:IAppointmentCovidAssessmentMapper)
    + CreateEntityAppointmentCommandHandler()
    + Handle(command:TCreateEntityAppointmentCommand) : EntityAppointmentCommandBaseResult
}
class "IRequestHandler"<T1,T2> {
}
"IRequestHandler" "<TCreateEntityAppointmentCommand,EntityAppointmentCommandBaseResult>" <|-- "CreateEntityAppointmentCommandHandler"

abstract class EntityAppointmentCommandBase {
    + Cancelled : bool <<get>> <<set>>
}
class "IRequest"<T> {
}
'class "IList"<T> {
'}
'class "List"<T> {
'}
"IRequest" "<EntityAppointmentCommandBaseResult>" <|-- EntityAppointmentCommandBase
IAppointmentCommandWithAttachments <|-- EntityAppointmentCommandBase
'EntityAppointmentCommandBase --> "EntityId" Guid
'EntityAppointmentCommandBase --> "AttachmentEntityType" EntityType
'EntityAppointmentCommandBase --> "StartDateTime" DateTimeOffset
'EntityAppointmentCommandBase --> "EndDateTime" DateTimeOffset
'EntityAppointmentCommandBase --> "Contacts<AppointmentContactCommand>" "IList"
'EntityAppointmentCommandBase o-> "NegotiatorIds<Guid>" "IList"
'EntityAppointmentCommandBase --> "AppointmentEventType" AppointmentEventType
'EntityAppointmentCommandBase --> "Attachments<CreateAttachment>" "IList"
'EntityAppointmentCommandBase o-> "CopiedAttachments<Guid>" "IList"
'EntityAppointmentCommandBase --> "OtherAttendees<CreateUpdateAppointmentOtherAttendeeCommand>" "List"
'EntityAppointmentCommandBase --> "TimeZoneId" Guid
'EntityAppointmentCommandBase o-> "Messages<AppointmentMessageCommand>" "IList"
EntityAppointmentCommandBase --> "AppointmentCovidAssessment" AppointmentCovidAssessmentCommand

class CreateEntityAppointmentCommand {
    + Version : int <<get>> <<set>>
    + IgnoreVersion : bool <<get>> <<set>>
}
EntityAppointmentCommandBase <|-- CreateEntityAppointmentCommand
ICommandWithVersion <|-- CreateEntityAppointmentCommand

class "EntityAppointmentCommandBaseValidator"<TCommand> {
    + EntityAppointmentCommandBaseValidator(enumTypeItemRepository:IEnumTypeItemRepository)
    + {static} ValidateMessageGroup(enumTypeItemRepository:IEnumTypeItemRepository, x:TCommand) : ValidationFailure
}
class "AbstractValidator"<T> {
}
"AbstractValidator" "<TCommand>" <|-- "EntityAppointmentCommandBaseValidator"

IRequest <-Left- IRequestHandler
CreateEntityAppointmentCommand --> CreateEntityAppointmentCommandHandler

@enduml